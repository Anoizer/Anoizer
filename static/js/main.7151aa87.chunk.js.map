{"version":3,"sources":["components/Form.js","components/TodosList.js","App.js","serviceWorker.js","index.js"],"names":["Form","onInputChange","_ref","value","target","_this","props","updateTask","handleKeyPress","event","key","addTodos","react_default","a","createElement","Fragment","type","onChange","this","onKeyPress","content","placeholder","autoFocus","onClick","Component","TodosList","showTasks","todos","map","todo","id","toString","deleteTodo","showEmpty","todoList","length","className","cookies","Cookies","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","cookiesSet","set","state","path","setState","newTask","Math","random","substr","concat","toConsumableArray","filteredTodos","filter","get","components_Form","components_TodosList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7151aa87.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass Form extends Component {\r\n\r\n\r\n    onInputChange = ({ target: { value } }) => {\r\n        this.props.updateTask(value);\r\n    };\r\n\r\n    handleKeyPress = (event) => {\r\n        if(event.key === 'Enter'){\r\n\r\n            this.props.addTodos();\r\n        }\r\n    };\r\n\r\n    render () {\r\n\r\n        return (\r\n            <>\r\n                <input type=\"text\" onChange={ this.onInputChange } onKeyPress={ this.handleKeyPress }\r\n                       value={ this.props.content } placeholder='type mew task' autoFocus\r\n                />\r\n                <button onClick={ this.props.addTodos }>Add Task</button>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react'\r\n\r\n\r\nclass TodosList extends Component {\r\n\r\n    showTasks = () => {\r\n        return this.props.todos.map(todo => {\r\n            return (\r\n                <div key = { todo.id.toString() }>\r\n                    <span onClick={ () => { this.props.deleteTodo(todo.id) }}>\r\n                        { todo.content }\r\n                    </span>\r\n                </div>\r\n            )\r\n        })\r\n\r\n    };\r\n\r\n    showEmpty = () => {\r\n        return (\r\n            <p>There are nothing to do...</p>\r\n        )\r\n    };\r\n\r\n    todoList = () => {\r\n        return this.props.todos.length ?\r\n            this.showTasks() :\r\n            this.showEmpty()\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <div className='list-wrapper'>\r\n                { this.todoList() }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodosList;","import React, { Component } from 'react';\nimport Form from './components/Form'\nimport TodosList from './components/TodosList'\nimport Cookies from 'universal-cookie'\n\n\nconst cookies = new Cookies();\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: '',\n\n            todos: cookies.get('myCookies') ? cookies.get('myCookies') : [\n                // {id: 1, content: 'understand React'},\n                // {id: 2, content: 'write to-do-list'}\n            ]\n        };\n    }\n\n    cookiesSet = () => {\n        // console.log('cookies: ',cookies.get('myCookies'));\n        // console.log('state: ', this.state.todos);\n        // console.log(cookies.get('myCookies').length);\n\n        cookies.set('myCookies', this.state.todos, {path: '/'});\n\n        // this.setState({todos: cookies.get('myCookies')});\n    };\n\n  updateTask = (value) => {\n      this.setState({content: value})\n  };\n\n  addTodos = () => {\n      const index = Math.random().toString(36).substr(2, 16);\n      const newTask = {id: index, content: this.state.content};\n\n      if(this.state.content) {\n          this.setState({todos: [...this.state.todos, newTask]});\n\n\n          this.setState({content: ''});\n\n          // console.log('addedstate: ', this.state.todos);\n\n          //cookie set\n          this.cookiesSet()\n      }\n  };\n\n  deleteTodo = (id) => {\n      const filteredTodos = this.state.todos.filter(todo => {\n          return todo.id !== id\n      });\n      this.setState({todos: filteredTodos});\n\n      //cookie set\n      // this.cookiesSet();\n  };\n\n  render () {\n      return (\n          <div className=\"App\">\n            <div>\n                <Form content = {this.state.content} updateTask = { this.updateTask } addTodos = { this.addTodos }/>\n            </div>\n            <div className='list'>\n                <TodosList todos = { this.state.todos } deleteTodo = { this.deleteTodo }/>\n            </div>\n          </div>\n      )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}